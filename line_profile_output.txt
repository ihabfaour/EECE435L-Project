
Profiling results for function: get_all_customers
Timer unit: 1e-07 s

Total time: 0.0478766 s
File: C:\Users\Ihab\435L\ecommerce_Faour_Haidar\services\customers\routes.py
Function: get_all_customers at line 194

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   194                                           @user_bp.route('/', methods=['GET'])
   195                                           @line_profile
   196                                           def get_all_customers():
   197                                               """
   198                                               Retrieve a list of all customers.
   199                                           
   200                                               :return: A JSON response with a list of customer details or an error message.
   201                                               """
   202         1          6.0      6.0      0.0      try:
   203                                                   # Query all users
   204         1     475168.0 475168.0     99.2          users = User.query.all()
   205                                           
   206                                                   # Serialize the result
   207         2          7.0      3.5      0.0          result = [
   208         3         31.0     10.3      0.0              {
   209         3        171.0     57.0      0.0                  "id": user.id,
   210         3         90.0     30.0      0.0                  "full_name": user.full_name,
   211         3         85.0     28.3      0.0                  "username": user.username,
   212         3         73.0     24.3      0.0                  "age": user.age,
   213         3         68.0     22.7      0.0                  "address": user.address,
   214         3         70.0     23.3      0.0                  "gender": user.gender,
   215         3         80.0     26.7      0.0                  "marital_status": user.marital_status,
   216         3         89.0     29.7      0.0                  "wallet_balance": float(user.wallet_balance),
   217                                                       }
   218         5         27.0      5.4      0.0              for user in users
   219                                                   ]
   220                                           
   221         1       2801.0   2801.0      0.6          return jsonify(result), 200
   222                                               except Exception as e:
   223                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: get_all_customers
Timer unit: 1e-07 s

Total time: 0.0054232 s
File: C:\Users\Ihab\435L\ecommerce_Faour_Haidar\services\customers\routes.py
Function: get_all_customers at line 195

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   195                                           @user_bp.route('/', methods=['GET'])
   196                                           @line_profile
   197                                           def get_all_customers():
   198                                               """
   199                                               Retrieve a list of all customers.
   200                                           
   201                                               :return: A JSON response with a list of customer details or an error message.
   202                                               """
   203         1          5.0      5.0      0.0      try:
   204                                                   # Query all users
   205         1      52021.0  52021.0     95.9          users = User.query.all()
   206                                           
   207                                                   # Serialize the result
   208         2          5.0      2.5      0.0          result = [
   209         3         26.0      8.7      0.0              {
   210         3        108.0     36.0      0.2                  "id": user.id,
   211         3         66.0     22.0      0.1                  "full_name": user.full_name,
   212         3         64.0     21.3      0.1                  "username": user.username,
   213         3         61.0     20.3      0.1                  "age": user.age,
   214         3         62.0     20.7      0.1                  "address": user.address,
   215         3         89.0     29.7      0.2                  "gender": user.gender,
   216         3         62.0     20.7      0.1                  "marital_status": user.marital_status,
   217         3         69.0     23.0      0.1                  "wallet_balance": float(user.wallet_balance),
   218                                                       }
   219         5         21.0      4.2      0.0              for user in users
   220                                                   ]
   221                                           
   222         1       1573.0   1573.0      2.9          return jsonify(result), 200
   223                                               except Exception as e:
   224                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: get_customer_by_id
Timer unit: 1e-07 s

Total time: 0.0064647 s
File: C:\Users\Ihab\435L\ecommerce_Faour_Haidar\services\customers\routes.py
Function: get_customer_by_id at line 226

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   226                                           @user_bp.route('/<int:customer_id>', methods=['GET'])
   227                                           @line_profile
   228                                           def get_customer_by_id(customer_id):
   229                                               """
   230                                               Retrieve details of a specific customer by ID.
   231                                           
   232                                               :param customer_id: ID of the customer to fetch.
   233                                               :return: A JSON response with the customer details or an error message.
   234                                               """
   235         1          8.0      8.0      0.0      try:
   236                                                   # Query the customer by ID
   237         1      62626.0  62626.0     96.9          user = User.query.get(customer_id)
   238                                           
   239         1          7.0      7.0      0.0          if not user:
   240                                                       return jsonify({"error": "Customer not found"}), 404
   241                                           
   242                                                   # Serialize the result
   243         1         10.0     10.0      0.0          result = {
   244         1         77.0     77.0      0.1              "id": user.id,
   245         1         25.0     25.0      0.0              "full_name": user.full_name,
   246         1         24.0     24.0      0.0              "username": user.username,
   247         1         22.0     22.0      0.0              "age": user.age,
   248         1         23.0     23.0      0.0              "address": user.address,
   249         1         21.0     21.0      0.0              "gender": user.gender,
   250         1         20.0     20.0      0.0              "marital_status": user.marital_status,
   251         1         36.0     36.0      0.1              "wallet_balance": float(user.wallet_balance),
   252                                                   }
   253                                           
   254         1       1748.0   1748.0      2.7          return jsonify(result), 200
   255                                               except Exception as e:
   256                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: get_customer_by_id
Timer unit: 1e-07 s

Total time: 0.0037509 s
File: C:\Users\Ihab\435L\ecommerce_Faour_Haidar\services\customers\routes.py
Function: get_customer_by_id at line 226

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   226                                           @user_bp.route('/<int:customer_id>', methods=['GET'])
   227                                           @line_profile
   228                                           def get_customer_by_id(customer_id):
   229                                               """
   230                                               Retrieve details of a specific customer by ID.
   231                                           
   232                                               :param customer_id: ID of the customer to fetch.
   233                                               :return: A JSON response with the customer details or an error message.
   234                                               """
   235         1         11.0     11.0      0.0      try:
   236                                                   # Query the customer by ID
   237         1      35997.0  35997.0     96.0          user = User.query.get(customer_id)
   238                                           
   239         1          5.0      5.0      0.0          if not user:
   240         1       1496.0   1496.0      4.0              return jsonify({"error": "Customer not found"}), 404
   241                                           
   242                                                   # Serialize the result
   243                                                   result = {
   244                                                       "id": user.id,
   245                                                       "full_name": user.full_name,
   246                                                       "username": user.username,
   247                                                       "age": user.age,
   248                                                       "address": user.address,
   249                                                       "gender": user.gender,
   250                                                       "marital_status": user.marital_status,
   251                                                       "wallet_balance": float(user.wallet_balance),
   252                                                   }
   253                                           
   254                                                   return jsonify(result), 200
   255                                               except Exception as e:
   256                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: get_customer_by_id
Timer unit: 1e-07 s

Total time: 0.0041594 s
File: C:\Users\Ihab\435L\ecommerce_Faour_Haidar\services\customers\routes.py
Function: get_customer_by_id at line 226

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   226                                           @user_bp.route('/<int:customer_id>', methods=['GET'])
   227                                           @line_profile
   228                                           def get_customer_by_id(customer_id):
   229                                               """
   230                                               Retrieve details of a specific customer by ID.
   231                                           
   232                                               :param customer_id: ID of the customer to fetch.
   233                                               :return: A JSON response with the customer details or an error message.
   234                                               """
   235         1         16.0     16.0      0.0      try:
   236                                                   # Query the customer by ID
   237         1      39836.0  39836.0     95.8          user = User.query.get(customer_id)
   238                                           
   239         1          6.0      6.0      0.0          if not user:
   240                                                       return jsonify({"error": "Customer not found"}), 404
   241                                           
   242                                                   # Serialize the result
   243         1         12.0     12.0      0.0          result = {
   244         1         67.0     67.0      0.2              "id": user.id,
   245         1         28.0     28.0      0.1              "full_name": user.full_name,
   246         1         23.0     23.0      0.1              "username": user.username,
   247         1         22.0     22.0      0.1              "age": user.age,
   248         1         22.0     22.0      0.1              "address": user.address,
   249         1         23.0     23.0      0.1              "gender": user.gender,
   250         1         21.0     21.0      0.1              "marital_status": user.marital_status,
   251         1         26.0     26.0      0.1              "wallet_balance": float(user.wallet_balance),
   252                                                   }
   253                                           
   254         1       1492.0   1492.0      3.6          return jsonify(result), 200
   255                                               except Exception as e:
   256                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: charge_wallet
Timer unit: 1e-07 s

Total time: 0.0183243 s
File: C:\Users\Ihab\435L\ecommerce_Faour_Haidar\services\customers\routes.py
Function: charge_wallet at line 258

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   258                                           @user_bp.route('/wallet/charge', methods=['POST'])
   259                                           @jwt_required()
   260                                           @line_profile
   261                                           def charge_wallet():
   262                                               """
   263                                               Add funds to the wallet of the logged-in user.
   264                                           
   265                                               :request json: {"amount": "Amount to add"}
   266                                               :return: A JSON response with the updated wallet balance or an error message.
   267                                               """
   268         1      45314.0  45314.0     24.7      auth_error = check_role('customer')  
   269         1          6.0      6.0      0.0      if auth_error:
   270                                                   return auth_error
   271         1          3.0      3.0      0.0      try:
   272                                                   # Get the currently logged-in user's identity
   273         1        337.0    337.0      0.2          current_user = get_jwt_identity()
   274                                           
   275                                                   # Query the customer by username
   276         1      30402.0  30402.0     16.6          customer = User.query.filter_by(username=current_user).first()
   277                                           
   278         1          6.0      6.0      0.0          if not customer:
   279                                                       return jsonify({"error": "Customer not found"}), 404
   280                                           
   281                                                   # Get the amount to charge from the request
   282         1       2138.0   2138.0      1.2          data = request.json
   283         1         11.0     11.0      0.0          amount = data.get("amount")
   284                                           
   285         1          8.0      8.0      0.0          if not amount or amount <= 0:
   286                                                       return jsonify({"error": "Invalid amount"}), 400
   287                                           
   288                                                   # Update wallet balance
   289         1        432.0    432.0      0.2          customer.wallet_balance += amount
   290         1      46551.0  46551.0     25.4          db.session.commit()
   291                                           
   292         3       1565.0    521.7      0.9          return jsonify({"message": f"${amount} successfully added to wallet", 
   293         2      56470.0  28235.0     30.8                          "wallet_balance": float(customer.wallet_balance)}), 200
   294                                               except Exception as e:
   295                                                   db.session.rollback()
   296                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: deduct_stock
Timer unit: 1e-09 s

Total time: 0.0428862 s
File: /app/services/inventory/routes.py
Function: deduct_stock at line 61

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    61                                           @inventory_bp.route('/<int:item_id>/deduct', methods=['POST'])
    62                                           @jwt_required()
    63                                           @line_profile
    64                                           def deduct_stock(item_id):
    65                                               """
    66                                               Deduct a specific quantity of stock from an inventory item (admin only).
    67                                           
    68                                               :param item_id: ID of the inventory item to deduct stock from.
    69                                               :request json: {
    70                                                   "quantity": "Quantity to deduct"
    71                                               }
    72                                               :return: A JSON response with a success message and remaining stock, or an error message.
    73                                               """
    74         1    2828845.0    3e+06      6.6      auth_error = authorize_admin()
    75         1        300.0    300.0      0.0      if auth_error:
    76                                                   return auth_error
    77                                           
    78         1        200.0    200.0      0.0      try:
    79                                                   # Get the item by ID
    80         1    7170612.0    7e+06     16.7          item = Inventory.query.get(item_id)
    81         1        300.0    300.0      0.0          if not item:
    82                                                       return jsonify({"error": "Item not found"}), 404
    83                                           
    84         1     220304.0 220304.0      0.5          data = request.json
    85         1        900.0    900.0      0.0          quantity = data.get('quantity', 0)
    86                                           
    87         1        300.0    300.0      0.0          if quantity <= 0:
    88                                                       return jsonify({"error": "Invalid quantity"}), 400
    89                                           
    90         1      27600.0  27600.0      0.1          if item.stock_count < quantity:
    91                                                       return jsonify({"error": "Insufficient stock"}), 400
    92                                           
    93                                                   # Deduct the stock
    94         1      34201.0  34201.0      0.1          item.stock_count -= quantity
    95         1   24591686.0    2e+07     57.3          db.session.commit()
    96                                           
    97         3     223803.0  74601.0      0.5          return jsonify({
    98         1    7760622.0    8e+06     18.1              "message": f"{quantity} units deducted from {item.name}",
    99         1      26301.0  26301.0      0.1              "remaining_stock": item.stock_count
   100         1        200.0    200.0      0.0          }), 200
   101                                               except Exception as e:
   102                                                   db.session.rollback()
   103                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: update_item
Timer unit: 1e-09 s

Total time: 0.0268692 s
File: /app/services/inventory/routes.py
Function: update_item at line 105

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   105                                           @inventory_bp.route('/<int:item_id>/update', methods=['PATCH'])
   106                                           @jwt_required()
   107                                           @line_profile
   108                                           def update_item(item_id):
   109                                               """
   110                                               Update details of an existing inventory item (admin only).
   111                                           
   112                                               :param item_id: ID of the inventory item to update.
   113                                               :request json: {
   114                                                   "name": "New name (optional)",
   115                                                   "category": "New category (optional)",
   116                                                   "price_per_item": "New price per unit (optional)",
   117                                                   "description": "New description (optional)",
   118                                                   "stock_count": "New stock count (optional)"
   119                                               }
   120                                               :return: A JSON response with a success message and updated item details, or an error message.
   121                                               """
   122         1    3059048.0    3e+06     11.4      auth_error = authorize_admin()
   123         1        400.0    400.0      0.0      if auth_error:
   124                                                   return auth_error
   125                                           
   126         1        100.0    100.0      0.0      try:
   127                                                   # Get the item by ID
   128         1    6614704.0    7e+06     24.6          item = Inventory.query.get(item_id)
   129         1       1500.0   1500.0      0.0          if not item:
   130                                                       return jsonify({"error": "Item not found"}), 404
   131                                           
   132                                                   # Update fields based on the input
   133         1     440106.0 440106.0      1.6          data = request.json
   134         1       1700.0   1700.0      0.0          if 'name' in data:
   135                                                       item.name = data['name']
   136         1        900.0    900.0      0.0          if 'category' in data:
   137                                                       item.category = data['category']
   138         1        900.0    900.0      0.0          if 'price_per_item' in data:
   139         1      70901.0  70901.0      0.3              item.price_per_item = data['price_per_item']
   140         1        900.0    900.0      0.0          if 'description' in data:
   141                                                       item.description = data['description']
   142         1        400.0    400.0      0.0          if 'stock_count' in data:
   143                                                       item.stock_count = data['stock_count']
   144                                           
   145         1   13885718.0    1e+07     51.7          db.session.commit()
   146                                           
   147         1    2791944.0    3e+06     10.4          return jsonify({"message": f"Item {item.name} updated successfully", "item": item.to_dict()}), 200
   148                                               except Exception as e:
   149                                                   db.session.rollback()
   150                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: get_all_customers
Timer unit: 1e-09 s

Total time: 0.00582059 s
File: /app/services/customers/routes.py
Function: get_all_customers at line 194

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   194                                           @user_bp.route('/', methods=['GET'])
   195                                           @line_profile
   196                                           def get_all_customers():
   197                                               """
   198                                               Retrieve a list of all customers.
   199                                           
   200                                               :return: A JSON response with a list of customer details or an error message.
   201                                               """
   202         1        800.0    800.0      0.0      try:
   203                                                   # Query all users
   204         1    5578991.0    6e+06     95.8          users = User.query.all()
   205                                           
   206                                                   # Serialize the result
   207         2      51300.0  25650.0      0.9          result = [
   208                                                       {
   209                                                           "id": user.id,
   210                                                           "full_name": user.full_name,
   211                                                           "username": user.username,
   212                                                           "age": user.age,
   213                                                           "address": user.address,
   214                                                           "gender": user.gender,
   215                                                           "marital_status": user.marital_status,
   216                                                           "wallet_balance": float(user.wallet_balance),
   217                                                       }
   218         1        200.0    200.0      0.0              for user in users
   219                                                   ]
   220                                           
   221         1     189300.0 189300.0      3.3          return jsonify(result), 200
   222                                               except Exception as e:
   223                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: get_customer_by_id
Timer unit: 1e-09 s

Total time: 0.00787641 s
File: /app/services/customers/routes.py
Function: get_customer_by_id at line 225

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   225                                           @user_bp.route('/<int:customer_id>', methods=['GET'])
   226                                           @line_profile
   227                                           def get_customer_by_id(customer_id):
   228                                               """
   229                                               Retrieve details of a specific customer by ID.
   230                                           
   231                                               :param customer_id: ID of the customer to fetch.
   232                                               :return: A JSON response with the customer details or an error message.
   233                                               """
   234         1       1000.0   1000.0      0.0      try:
   235                                                   # Query the customer by ID
   236         1    7692410.0    8e+06     97.7          user = User.query.get(customer_id)
   237                                           
   238         1       2200.0   2200.0      0.0          if not user:
   239                                                       return jsonify({"error": "Customer not found"}), 404
   240                                           
   241                                                   # Serialize the result
   242         1       1900.0   1900.0      0.0          result = {
   243         1      13300.0  13300.0      0.2              "id": user.id,
   244         1       2300.0   2300.0      0.0              "full_name": user.full_name,
   245         1       2100.0   2100.0      0.0              "username": user.username,
   246         1       1600.0   1600.0      0.0              "age": user.age,
   247         1       1800.0   1800.0      0.0              "address": user.address,
   248         1       1700.0   1700.0      0.0              "gender": user.gender,
   249         1       1800.0   1800.0      0.0              "marital_status": user.marital_status,
   250         1       2800.0   2800.0      0.0              "wallet_balance": float(user.wallet_balance),
   251                                                   }
   252                                           
   253         1     151500.0 151500.0      1.9          return jsonify(result), 200
   254                                               except Exception as e:
   255                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: get_customer_by_id
Timer unit: 1e-09 s

Total time: 0.00307489 s
File: /app/services/customers/routes.py
Function: get_customer_by_id at line 225

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   225                                           @user_bp.route('/<int:customer_id>', methods=['GET'])
   226                                           @line_profile
   227                                           def get_customer_by_id(customer_id):
   228                                               """
   229                                               Retrieve details of a specific customer by ID.
   230                                           
   231                                               :param customer_id: ID of the customer to fetch.
   232                                               :return: A JSON response with the customer details or an error message.
   233                                               """
   234         1        600.0    600.0      0.0      try:
   235                                                   # Query the customer by ID
   236         1    2958994.0    3e+06     96.2          user = User.query.get(customer_id)
   237                                           
   238         1        300.0    300.0      0.0          if not user:
   239         1     115000.0 115000.0      3.7              return jsonify({"error": "Customer not found"}), 404
   240                                           
   241                                                   # Serialize the result
   242                                                   result = {
   243                                                       "id": user.id,
   244                                                       "full_name": user.full_name,
   245                                                       "username": user.username,
   246                                                       "age": user.age,
   247                                                       "address": user.address,
   248                                                       "gender": user.gender,
   249                                                       "marital_status": user.marital_status,
   250                                                       "wallet_balance": float(user.wallet_balance),
   251                                                   }
   252                                           
   253                                                   return jsonify(result), 200
   254                                               except Exception as e:
   255                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: get_customer_by_id
Timer unit: 1e-09 s

Total time: 0.0040253 s
File: /app/services/customers/routes.py
Function: get_customer_by_id at line 225

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   225                                           @user_bp.route('/<int:customer_id>', methods=['GET'])
   226                                           @line_profile
   227                                           def get_customer_by_id(customer_id):
   228                                               """
   229                                               Retrieve details of a specific customer by ID.
   230                                           
   231                                               :param customer_id: ID of the customer to fetch.
   232                                               :return: A JSON response with the customer details or an error message.
   233                                               """
   234         1        600.0    600.0      0.0      try:
   235                                                   # Query the customer by ID
   236         1    3868398.0    4e+06     96.1          user = User.query.get(customer_id)
   237                                           
   238         1        700.0    700.0      0.0          if not user:
   239                                                       return jsonify({"error": "Customer not found"}), 404
   240                                           
   241                                                   # Serialize the result
   242         1       1500.0   1500.0      0.0          result = {
   243         1      10000.0  10000.0      0.2              "id": user.id,
   244         1       2400.0   2400.0      0.1              "full_name": user.full_name,
   245         1       2300.0   2300.0      0.1              "username": user.username,
   246         1       1700.0   1700.0      0.0              "age": user.age,
   247         1       1800.0   1800.0      0.0              "address": user.address,
   248         1       2100.0   2100.0      0.1              "gender": user.gender,
   249         1       1900.0   1900.0      0.0              "marital_status": user.marital_status,
   250         1      20000.0  20000.0      0.5              "wallet_balance": float(user.wallet_balance),
   251                                                   }
   252                                           
   253         1     111900.0 111900.0      2.8          return jsonify(result), 200
   254                                               except Exception as e:
   255                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: charge_wallet
Timer unit: 1e-09 s

Total time: 0.0163426 s
File: /app/services/customers/routes.py
Function: charge_wallet at line 257

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   257                                           @user_bp.route('/wallet/charge', methods=['POST'])
   258                                           @jwt_required()
   259                                           @line_profile
   260                                           def charge_wallet():
   261                                               """
   262                                               Add funds to the wallet of the logged-in user.
   263                                           
   264                                               :request json: {"amount": "Amount to add"}
   265                                               :return: A JSON response with the updated wallet balance or an error message.
   266                                               """
   267         1    2629299.0    3e+06     16.1      auth_error = check_role('customer')  
   268         1        200.0    200.0      0.0      if auth_error:
   269                                                   return auth_error
   270         1        100.0    100.0      0.0      try:
   271                                                   # Get the currently logged-in user's identity
   272         1      44200.0  44200.0      0.3          current_user = get_jwt_identity()
   273                                           
   274                                                   # Query the customer by username
   275         1    2123299.0    2e+06     13.0          customer = User.query.filter_by(username=current_user).first()
   276                                           
   277         1        400.0    400.0      0.0          if not customer:
   278                                                       return jsonify({"error": "Customer not found"}), 404
   279                                           
   280                                                   # Get the amount to charge from the request
   281         1     159800.0 159800.0      1.0          data = request.json
   282         1        900.0    900.0      0.0          amount = data.get("amount")
   283                                           
   284         1        300.0    300.0      0.0          if not amount or amount <= 0:
   285                                                       return jsonify({"error": "Invalid amount"}), 400
   286                                           
   287                                                   # Update wallet balance
   288         1      27200.0  27200.0      0.2          customer.wallet_balance += amount
   289         1    7035796.0    7e+06     43.1          db.session.commit()
   290                                           
   291         3     212100.0  70700.0      1.3          return jsonify({"message": f"${amount} successfully added to wallet", 
   292         2    4108998.0    2e+06     25.1                          "wallet_balance": float(customer.wallet_balance)}), 200
   293                                               except Exception as e:
   294                                                   db.session.rollback()
   295                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: view_wishlist
Timer unit: 1e-09 s

Total time: 0.0168726 s
File: /app/services/wishlist/routes.py
Function: view_wishlist at line 64

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    64                                           @wishlist_bp.route('/', methods=['GET'])
    65                                           @jwt_required()
    66                                           @line_profile
    67                                           def view_wishlist():
    68                                               """
    69                                               View the items in the user's wishlist (customer only).
    70                                           
    71                                               :return: A JSON response with a list of wishlist items, or an error message if access is forbidden.
    72                                               """
    73         1    2779810.0    3e+06     16.5      auth_error = authorize_customer()
    74         1        200.0    200.0      0.0      if auth_error:
    75                                                   return auth_error
    76                                           
    77         1      25100.0  25100.0      0.1      current_user = get_jwt_identity()
    78         1    2546510.0    3e+06     15.1      user = User.query.filter_by(username=current_user).first()
    79                                           
    80                                               # Fetch wishlist items for the user
    81         1   11327642.0    1e+07     67.1      wishlist = Wishlist.query.filter_by(user_id=user.id).all()
    82         1      30600.0  30600.0      0.2      result = [entry.to_dict() for entry in wishlist]
    83                                           
    84         1     162701.0 162701.0      1.0      return jsonify(result), 200


Profiling results for function: deduct_stock
Timer unit: 1e-09 s

Total time: 0.0207883 s
File: /app/services/inventory/routes.py
Function: deduct_stock at line 61

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    61                                           @inventory_bp.route('/<int:item_id>/deduct', methods=['POST'])
    62                                           @jwt_required()
    63                                           @line_profile
    64                                           def deduct_stock(item_id):
    65                                               """
    66                                               Deduct a specific quantity of stock from an inventory item (admin only).
    67                                           
    68                                               :param item_id: ID of the inventory item to deduct stock from.
    69                                               :request json: {
    70                                                   "quantity": "Quantity to deduct"
    71                                               }
    72                                               :return: A JSON response with a success message and remaining stock, or an error message.
    73                                               """
    74         1    3124817.0    3e+06     15.0      auth_error = authorize_admin()
    75         1       1800.0   1800.0      0.0      if auth_error:
    76                                                   return auth_error
    77                                           
    78         1        200.0    200.0      0.0      try:
    79                                                   # Get the item by ID
    80         1    4760226.0    5e+06     22.9          item = Inventory.query.get(item_id)
    81         1        300.0    300.0      0.0          if not item:
    82                                                       return jsonify({"error": "Item not found"}), 404
    83                                           
    84         1     188301.0 188301.0      0.9          data = request.json
    85         1        900.0    900.0      0.0          quantity = data.get('quantity', 0)
    86                                           
    87         1        200.0    200.0      0.0          if quantity <= 0:
    88                                                       return jsonify({"error": "Invalid quantity"}), 400
    89                                           
    90         1       4500.0   4500.0      0.0          if item.stock_count < quantity:
    91                                                       return jsonify({"error": "Insufficient stock"}), 400
    92                                           
    93                                                   # Deduct the stock
    94         1      29100.0  29100.0      0.1          item.stock_count -= quantity
    95         1    8811847.0    9e+06     42.4          db.session.commit()
    96                                           
    97         3     107800.0  35933.3      0.5          return jsonify({
    98         1    3754321.0    4e+06     18.1              "message": f"{quantity} units deducted from {item.name}",
    99         1       3800.0   3800.0      0.0              "remaining_stock": item.stock_count
   100         1        200.0    200.0      0.0          }), 200
   101                                               except Exception as e:
   102                                                   db.session.rollback()
   103                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: update_item
Timer unit: 1e-09 s

Total time: 0.0162045 s
File: /app/services/inventory/routes.py
Function: update_item at line 105

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   105                                           @inventory_bp.route('/<int:item_id>/update', methods=['PATCH'])
   106                                           @jwt_required()
   107                                           @line_profile
   108                                           def update_item(item_id):
   109                                               """
   110                                               Update details of an existing inventory item (admin only).
   111                                           
   112                                               :param item_id: ID of the inventory item to update.
   113                                               :request json: {
   114                                                   "name": "New name (optional)",
   115                                                   "category": "New category (optional)",
   116                                                   "price_per_item": "New price per unit (optional)",
   117                                                   "description": "New description (optional)",
   118                                                   "stock_count": "New stock count (optional)"
   119                                               }
   120                                               :return: A JSON response with a success message and updated item details, or an error message.
   121                                               """
   122         1    2533713.0    3e+06     15.6      auth_error = authorize_admin()
   123         1        400.0    400.0      0.0      if auth_error:
   124                                                   return auth_error
   125                                           
   126         1        200.0    200.0      0.0      try:
   127                                                   # Get the item by ID
   128         1    2020511.0    2e+06     12.5          item = Inventory.query.get(item_id)
   129         1        400.0    400.0      0.0          if not item:
   130                                                       return jsonify({"error": "Item not found"}), 404
   131                                           
   132                                                   # Update fields based on the input
   133         1     138201.0 138201.0      0.9          data = request.json
   134         1        500.0    500.0      0.0          if 'name' in data:
   135                                                       item.name = data['name']
   136         1        300.0    300.0      0.0          if 'category' in data:
   137                                                       item.category = data['category']
   138         1        300.0    300.0      0.0          if 'price_per_item' in data:
   139         1      28100.0  28100.0      0.2              item.price_per_item = data['price_per_item']
   140         1        400.0    400.0      0.0          if 'description' in data:
   141                                                       item.description = data['description']
   142         1        300.0    300.0      0.0          if 'stock_count' in data:
   143                                                       item.stock_count = data['stock_count']
   144                                           
   145         1    9459651.0    9e+06     58.4          db.session.commit()
   146                                           
   147         1    2021511.0    2e+06     12.5          return jsonify({"message": f"Item {item.name} updated successfully", "item": item.to_dict()}), 200
   148                                               except Exception as e:
   149                                                   db.session.rollback()
   150                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: get_all_customers
Timer unit: 1e-09 s

Total time: 0.00426934 s
File: /app/services/customers/routes.py
Function: get_all_customers at line 194

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   194                                           @user_bp.route('/', methods=['GET'])
   195                                           @line_profile
   196                                           def get_all_customers():
   197                                               """
   198                                               Retrieve a list of all customers.
   199                                           
   200                                               :return: A JSON response with a list of customer details or an error message.
   201                                               """
   202         1        600.0    600.0      0.0      try:
   203                                                   # Query all users
   204         1    4089047.0    4e+06     95.8          users = User.query.all()
   205                                           
   206                                                   # Serialize the result
   207         2      47000.0  23500.0      1.1          result = [
   208                                                       {
   209                                                           "id": user.id,
   210                                                           "full_name": user.full_name,
   211                                                           "username": user.username,
   212                                                           "age": user.age,
   213                                                           "address": user.address,
   214                                                           "gender": user.gender,
   215                                                           "marital_status": user.marital_status,
   216                                                           "wallet_balance": float(user.wallet_balance),
   217                                                       }
   218         1        200.0    200.0      0.0              for user in users
   219                                                   ]
   220                                           
   221         1     132498.0 132498.0      3.1          return jsonify(result), 200
   222                                               except Exception as e:
   223                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: get_customer_by_id
Timer unit: 1e-09 s

Total time: 0.00397165 s
File: /app/services/customers/routes.py
Function: get_customer_by_id at line 225

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   225                                           @user_bp.route('/<int:customer_id>', methods=['GET'])
   226                                           @line_profile
   227                                           def get_customer_by_id(customer_id):
   228                                               """
   229                                               Retrieve details of a specific customer by ID.
   230                                           
   231                                               :param customer_id: ID of the customer to fetch.
   232                                               :return: A JSON response with the customer details or an error message.
   233                                               """
   234         1        600.0    600.0      0.0      try:
   235                                                   # Query the customer by ID
   236         1    3841151.0    4e+06     96.7          user = User.query.get(customer_id)
   237                                           
   238         1        400.0    400.0      0.0          if not user:
   239                                                       return jsonify({"error": "Customer not found"}), 404
   240                                           
   241                                                   # Serialize the result
   242         1       1400.0   1400.0      0.0          result = {
   243         1       4800.0   4800.0      0.1              "id": user.id,
   244         1       1500.0   1500.0      0.0              "full_name": user.full_name,
   245         1       1400.0   1400.0      0.0              "username": user.username,
   246         1       1400.0   1400.0      0.0              "age": user.age,
   247         1       2100.0   2100.0      0.1              "address": user.address,
   248         1       2300.0   2300.0      0.1              "gender": user.gender,
   249         1       2000.0   2000.0      0.1              "marital_status": user.marital_status,
   250         1       3300.0   3300.0      0.1              "wallet_balance": float(user.wallet_balance),
   251                                                   }
   252                                           
   253         1     109298.0 109298.0      2.8          return jsonify(result), 200
   254                                               except Exception as e:
   255                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: get_customer_by_id
Timer unit: 1e-09 s

Total time: 0.00327196 s
File: /app/services/customers/routes.py
Function: get_customer_by_id at line 225

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   225                                           @user_bp.route('/<int:customer_id>', methods=['GET'])
   226                                           @line_profile
   227                                           def get_customer_by_id(customer_id):
   228                                               """
   229                                               Retrieve details of a specific customer by ID.
   230                                           
   231                                               :param customer_id: ID of the customer to fetch.
   232                                               :return: A JSON response with the customer details or an error message.
   233                                               """
   234         1       1100.0   1100.0      0.0      try:
   235                                                   # Query the customer by ID
   236         1    3135160.0    3e+06     95.8          user = User.query.get(customer_id)
   237                                           
   238         1        400.0    400.0      0.0          if not user:
   239         1     135298.0 135298.0      4.1              return jsonify({"error": "Customer not found"}), 404
   240                                           
   241                                                   # Serialize the result
   242                                                   result = {
   243                                                       "id": user.id,
   244                                                       "full_name": user.full_name,
   245                                                       "username": user.username,
   246                                                       "age": user.age,
   247                                                       "address": user.address,
   248                                                       "gender": user.gender,
   249                                                       "marital_status": user.marital_status,
   250                                                       "wallet_balance": float(user.wallet_balance),
   251                                                   }
   252                                           
   253                                                   return jsonify(result), 200
   254                                               except Exception as e:
   255                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: get_customer_by_id
Timer unit: 1e-09 s

Total time: 0.00279536 s
File: /app/services/customers/routes.py
Function: get_customer_by_id at line 225

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   225                                           @user_bp.route('/<int:customer_id>', methods=['GET'])
   226                                           @line_profile
   227                                           def get_customer_by_id(customer_id):
   228                                               """
   229                                               Retrieve details of a specific customer by ID.
   230                                           
   231                                               :param customer_id: ID of the customer to fetch.
   232                                               :return: A JSON response with the customer details or an error message.
   233                                               """
   234         1       1000.0   1000.0      0.0      try:
   235                                                   # Query the customer by ID
   236         1    2657665.0    3e+06     95.1          user = User.query.get(customer_id)
   237                                           
   238         1        400.0    400.0      0.0          if not user:
   239                                                       return jsonify({"error": "Customer not found"}), 404
   240                                           
   241                                                   # Serialize the result
   242         1       1000.0   1000.0      0.0          result = {
   243         1       5900.0   5900.0      0.2              "id": user.id,
   244         1       1600.0   1600.0      0.1              "full_name": user.full_name,
   245         1       1500.0   1500.0      0.1              "username": user.username,
   246         1       1600.0   1600.0      0.1              "age": user.age,
   247         1       1700.0   1700.0      0.1              "address": user.address,
   248         1       1400.0   1400.0      0.1              "gender": user.gender,
   249         1       1400.0   1400.0      0.1              "marital_status": user.marital_status,
   250         1       2100.0   2100.0      0.1              "wallet_balance": float(user.wallet_balance),
   251                                                   }
   252                                           
   253         1     118098.0 118098.0      4.2          return jsonify(result), 200
   254                                               except Exception as e:
   255                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: charge_wallet
Timer unit: 1e-09 s

Total time: 0.01601 s
File: /app/services/customers/routes.py
Function: charge_wallet at line 257

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   257                                           @user_bp.route('/wallet/charge', methods=['POST'])
   258                                           @jwt_required()
   259                                           @line_profile
   260                                           def charge_wallet():
   261                                               """
   262                                               Add funds to the wallet of the logged-in user.
   263                                           
   264                                               :request json: {"amount": "Amount to add"}
   265                                               :return: A JSON response with the updated wallet balance or an error message.
   266                                               """
   267         1    2136872.0    2e+06     13.3      auth_error = check_role('customer')  
   268         1        300.0    300.0      0.0      if auth_error:
   269                                                   return auth_error
   270         1        100.0    100.0      0.0      try:
   271                                                   # Get the currently logged-in user's identity
   272         1      16800.0  16800.0      0.1          current_user = get_jwt_identity()
   273                                           
   274                                                   # Query the customer by username
   275         1    2075173.0    2e+06     13.0          customer = User.query.filter_by(username=current_user).first()
   276                                           
   277         1        300.0    300.0      0.0          if not customer:
   278                                                       return jsonify({"error": "Customer not found"}), 404
   279                                           
   280                                                   # Get the amount to charge from the request
   281         1     294196.0 294196.0      1.8          data = request.json
   282         1        800.0    800.0      0.0          amount = data.get("amount")
   283                                           
   284         1        400.0    400.0      0.0          if not amount or amount <= 0:
   285                                                       return jsonify({"error": "Invalid amount"}), 400
   286                                           
   287                                                   # Update wallet balance
   288         1      34100.0  34100.0      0.2          customer.wallet_balance += amount
   289         1    8061596.0    8e+06     50.4          db.session.commit()
   290                                           
   291         3     103199.0  34399.7      0.6          return jsonify({"message": f"${amount} successfully added to wallet", 
   292         2    3286158.0    2e+06     20.5                          "wallet_balance": float(customer.wallet_balance)}), 200
   293                                               except Exception as e:
   294                                                   db.session.rollback()
   295                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: view_wishlist
Timer unit: 1e-09 s

Total time: 0.00730025 s
File: /app/services/wishlist/routes.py
Function: view_wishlist at line 64

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    64                                           @wishlist_bp.route('/', methods=['GET'])
    65                                           @jwt_required()
    66                                           @line_profile
    67                                           def view_wishlist():
    68                                               """
    69                                               View the items in the user's wishlist (customer only).
    70                                           
    71                                               :return: A JSON response with a list of wishlist items, or an error message if access is forbidden.
    72                                               """
    73         1    2501019.0    3e+06     34.3      auth_error = authorize_customer()
    74         1        300.0    300.0      0.0      if auth_error:
    75                                                   return auth_error
    76                                           
    77         1      23700.0  23700.0      0.3      current_user = get_jwt_identity()
    78         1    2119016.0    2e+06     29.0      user = User.query.filter_by(username=current_user).first()
    79                                           
    80                                               # Fetch wishlist items for the user
    81         1    2542119.0    3e+06     34.8      wishlist = Wishlist.query.filter_by(user_id=user.id).all()
    82         1      13900.0  13900.0      0.2      result = [entry.to_dict() for entry in wishlist]
    83                                           
    84         1     100200.0 100200.0      1.4      return jsonify(result), 200


Profiling results for function: charge_wallet
Timer unit: 1e-07 s

Total time: 0.0203738 s
File: C:\Users\naelt\OneDrive\Desktop\Docs\EECE435L\Project\ecommerce_Faour_Haidar\services\customers\routes.py
Function: charge_wallet at line 257

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   257                                           @user_bp.route('/wallet/charge', methods=['POST'])
   258                                           @jwt_required()
   259                                           @line_profile
   260                                           def charge_wallet():
   261                                               """
   262                                               Add funds to the wallet of the logged-in user.
   263                                           
   264                                               :request json: {"amount": "Amount to add"}
   265                                               :return: A JSON response with the updated wallet balance or an error message.
   266                                               """
   267         1      32899.0  32899.0     16.1      auth_error = check_role('customer')  
   268         1          3.0      3.0      0.0      if auth_error:
   269                                                   return auth_error
   270         1          2.0      2.0      0.0      try:
   271                                                   # Get the currently logged-in user's identity
   272         1        154.0    154.0      0.1          current_user = get_jwt_identity()
   273                                           
   274                                                   # Query the customer by username
   275         1      17920.0  17920.0      8.8          customer = User.query.filter_by(username=current_user).first()
   276                                           
   277         1          5.0      5.0      0.0          if not customer:
   278                                                       return jsonify({"error": "Customer not found"}), 404
   279                                           
   280                                                   # Get the amount to charge from the request
   281         1       2246.0   2246.0      1.1          data = request.json
   282         1          5.0      5.0      0.0          amount = data.get("amount")
   283                                           
   284         1          8.0      8.0      0.0          if not amount or amount <= 0:
   285                                                       return jsonify({"error": "Invalid amount"}), 400
   286                                           
   287                                                   # Update wallet balance
   288         1        507.0    507.0      0.2          customer.wallet_balance += amount
   289         1     106153.0 106153.0     52.1          db.session.commit()
   290                                           
   291         3       2325.0    775.0      1.1          return jsonify({"message": f"${amount} successfully added to wallet", 
   292         2      41511.0  20755.5     20.4                          "wallet_balance": float(customer.wallet_balance)}), 200
   293                                               except Exception as e:
   294                                                   db.session.rollback()
   295                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: display_goods
Timer unit: 1e-07 s

Total time: 2.01644 s
File: C:\Users\naelt\OneDrive\Desktop\Docs\EECE435L\Project\ecommerce_Faour_Haidar\utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1   10056602.0    1e+07     49.9          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1      34381.0  34381.0      0.2          result = func(*args, **kwargs)
    81         1   10063859.0    1e+07     49.9          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         2       9077.0   4538.5      0.0          with open("memory_profile_output.txt", "a") as file:
    85         1        165.0    165.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1        243.0    243.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1         74.0     74.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1         14.0     14.0      0.0          return result


Profiling results for function: make_sale
Timer unit: 1e-07 s

Total time: 2.03413 s
File: C:\Users\naelt\OneDrive\Desktop\Docs\EECE435L\Project\ecommerce_Faour_Haidar\utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1   10059673.0    1e+07     49.5          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1     209602.0 209602.0      1.0          result = func(*args, **kwargs)
    81         1   10054311.0    1e+07     49.4          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         2      17402.0   8701.0      0.1          with open("memory_profile_output.txt", "a") as file:
    85         1        150.0    150.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1        115.0    115.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1         62.0     62.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1         15.0     15.0      0.0          return result


Profiling results for function: make_sale
Timer unit: 1e-07 s

Total time: 2.03497 s
File: C:\Users\naelt\OneDrive\Desktop\Docs\EECE435L\Project\ecommerce_Faour_Haidar\utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1   10067994.0    1e+07     49.5          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1     212241.0 212241.0      1.0          result = func(*args, **kwargs)
    81         1   10064185.0    1e+07     49.5          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         2       4915.0   2457.5      0.0          with open("memory_profile_output.txt", "a") as file:
    85         1        156.0    156.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1        128.0    128.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1         65.0     65.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1         11.0     11.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-07 s

Total time: 2.03227 s
File: C:\Users\naelt\OneDrive\Desktop\Docs\EECE435L\Project\ecommerce_Faour_Haidar\utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1   10077177.0    1e+07     49.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1     183786.0 183786.0      0.9          result = func(*args, **kwargs)
    81         1   10056814.0    1e+07     49.5          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         2       4546.0   2273.0      0.0          with open("memory_profile_output.txt", "a") as file:
    85         1        133.0    133.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1        119.0    119.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1         67.0     67.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1         11.0     11.0      0.0          return result


Profiling results for function: view_wishlist
Timer unit: 1e-07 s

Total time: 0.0073739 s
File: C:\Users\naelt\OneDrive\Desktop\Docs\EECE435L\Project\ecommerce_Faour_Haidar\services\wishlist\routes.py
Function: view_wishlist at line 64

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    64                                           @wishlist_bp.route('/', methods=['GET'])
    65                                           @jwt_required()
    66                                           @line_profile
    67                                           def view_wishlist():
    68                                               """
    69                                               View the items in the user's wishlist (customer only).
    70                                           
    71                                               :return: A JSON response with a list of wishlist items, or an error message if access is forbidden.
    72                                               """
    73         1      29337.0  29337.0     39.8      auth_error = authorize_customer()
    74         1          3.0      3.0      0.0      if auth_error:
    75                                                   return auth_error
    76                                           
    77         1        191.0    191.0      0.3      current_user = get_jwt_identity()
    78         1      17242.0  17242.0     23.4      user = User.query.filter_by(username=current_user).first()
    79                                           
    80                                               # Fetch wishlist items for the user
    81         1      25178.0  25178.0     34.1      wishlist = Wishlist.query.filter_by(user_id=user.id).all()
    82         2         93.0     46.5      0.1      result = [entry.to_dict() for entry in wishlist]
    83                                           
    84         1       1695.0   1695.0      2.3      return jsonify(result), 200


Profiling results for function: update_item
Timer unit: 1e-07 s

Total time: 0.0027261 s
File: C:\Users\naelt\OneDrive\Desktop\Docs\EECE435L\Project\ecommerce_Faour_Haidar\services\inventory\routes.py
Function: update_item at line 105

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   105                                           @inventory_bp.route('/<int:item_id>/update', methods=['PATCH'])
   106                                           @jwt_required()
   107                                           @line_profile
   108                                           def update_item(item_id):
   109                                               """
   110                                               Update details of an existing inventory item (admin only).
   111                                           
   112                                               :param item_id: ID of the inventory item to update.
   113                                               :request json: {
   114                                                   "name": "New name (optional)",
   115                                                   "category": "New category (optional)",
   116                                                   "price_per_item": "New price per unit (optional)",
   117                                                   "description": "New description (optional)",
   118                                                   "stock_count": "New stock count (optional)"
   119                                               }
   120                                               :return: A JSON response with a success message and updated item details, or an error message.
   121                                               """
   122         1      27253.0  27253.0    100.0      auth_error = authorize_admin()
   123         1          4.0      4.0      0.0      if auth_error:
   124         1          4.0      4.0      0.0          return auth_error
   125                                           
   126                                               try:
   127                                                   # Get the item by ID
   128                                                   item = Inventory.query.get(item_id)
   129                                                   if not item:
   130                                                       return jsonify({"error": "Item not found"}), 404
   131                                           
   132                                                   # Update fields based on the input
   133                                                   data = request.json
   134                                                   if 'name' in data:
   135                                                       item.name = data['name']
   136                                                   if 'category' in data:
   137                                                       item.category = data['category']
   138                                                   if 'price_per_item' in data:
   139                                                       item.price_per_item = data['price_per_item']
   140                                                   if 'description' in data:
   141                                                       item.description = data['description']
   142                                                   if 'stock_count' in data:
   143                                                       item.stock_count = data['stock_count']
   144                                           
   145                                                   db.session.commit()
   146                                           
   147                                                   return jsonify({"message": f"Item {item.name} updated successfully", "item": item.to_dict()}), 200
   148                                               except Exception as e:
   149                                                   db.session.rollback()
   150                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: update_item
Timer unit: 1e-07 s

Total time: 0.0116109 s
File: C:\Users\naelt\OneDrive\Desktop\Docs\EECE435L\Project\ecommerce_Faour_Haidar\services\inventory\routes.py
Function: update_item at line 105

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   105                                           @inventory_bp.route('/<int:item_id>/update', methods=['PATCH'])
   106                                           @jwt_required()
   107                                           @line_profile
   108                                           def update_item(item_id):
   109                                               """
   110                                               Update details of an existing inventory item (admin only).
   111                                           
   112                                               :param item_id: ID of the inventory item to update.
   113                                               :request json: {
   114                                                   "name": "New name (optional)",
   115                                                   "category": "New category (optional)",
   116                                                   "price_per_item": "New price per unit (optional)",
   117                                                   "description": "New description (optional)",
   118                                                   "stock_count": "New stock count (optional)"
   119                                               }
   120                                               :return: A JSON response with a success message and updated item details, or an error message.
   121                                               """
   122         1      23198.0  23198.0     20.0      auth_error = authorize_admin()
   123         1          3.0      3.0      0.0      if auth_error:
   124                                                   return auth_error
   125                                           
   126         1          2.0      2.0      0.0      try:
   127                                                   # Get the item by ID
   128         1      15833.0  15833.0     13.6          item = Inventory.query.get(item_id)
   129         1          4.0      4.0      0.0          if not item:
   130                                                       return jsonify({"error": "Item not found"}), 404
   131                                           
   132                                                   # Update fields based on the input
   133         1       1276.0   1276.0      1.1          data = request.json
   134         1          4.0      4.0      0.0          if 'name' in data:
   135                                                       item.name = data['name']
   136         1          3.0      3.0      0.0          if 'category' in data:
   137                                                       item.category = data['category']
   138         1         77.0     77.0      0.1          if 'price_per_item' in data:
   139         1        283.0    283.0      0.2              item.price_per_item = data['price_per_item']
   140         1          5.0      5.0      0.0          if 'description' in data:
   141                                                       item.description = data['description']
   142         1          4.0      4.0      0.0          if 'stock_count' in data:
   143         1         83.0     83.0      0.1              item.stock_count = data['stock_count']
   144                                           
   145         1      58377.0  58377.0     50.3          db.session.commit()
   146                                           
   147         1      16957.0  16957.0     14.6          return jsonify({"message": f"Item {item.name} updated successfully", "item": item.to_dict()}), 200
   148                                               except Exception as e:
   149                                                   db.session.rollback()
   150                                                   return jsonify({"error": str(e)}), 500


Profiling results for function: view_wishlist
Timer unit: 1e-07 s

Total time: 0.0036323 s
File: C:\Users\naelt\OneDrive\Desktop\Docs\EECE435L\Project\ecommerce_Faour_Haidar\services\wishlist\routes.py
Function: view_wishlist at line 64

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    64                                           @wishlist_bp.route('/', methods=['GET'])
    65                                           @jwt_required()
    66                                           @line_profile
    67                                           def view_wishlist():
    68                                               """
    69                                               View the items in the user's wishlist (customer only).
    70                                           
    71                                               :return: A JSON response with a list of wishlist items, or an error message if access is forbidden.
    72                                               """
    73         1      36315.0  36315.0    100.0      auth_error = authorize_customer()
    74         1          5.0      5.0      0.0      if auth_error:
    75         1          3.0      3.0      0.0          return auth_error
    76                                           
    77                                               current_user = get_jwt_identity()
    78                                               user = User.query.filter_by(username=current_user).first()
    79                                           
    80                                               # Fetch wishlist items for the user
    81                                               wishlist = Wishlist.query.filter_by(user_id=user.id).all()
    82                                               result = [entry.to_dict() for entry in wishlist]
    83                                           
    84                                               return jsonify(result), 200


Profiling results for function: display_goods
Timer unit: 1e-07 s

Total time: 2.04458 s
File: C:\Users\naelt\OneDrive\Desktop\Docs\EECE435L\Project\ecommerce_Faour_Haidar\utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1   10210166.0    1e+07     49.9          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1     169274.0 169274.0      0.8          result = func(*args, **kwargs)
    81         1   10060725.0    1e+07     49.2          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         2       5272.0   2636.0      0.0          with open("memory_profile_output.txt", "a") as file:
    85         1        164.0    164.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1        133.0    133.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1         66.0     66.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1         14.0     14.0      0.0          return result


Profiling results for function: display_goods
Timer unit: 1e-07 s

Total time: 2.01402 s
File: C:\Users\naelt\OneDrive\Desktop\Docs\EECE435L\Project\ecommerce_Faour_Haidar\utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1   10047438.0    1e+07     49.9          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1      25645.0  25645.0      0.1          result = func(*args, **kwargs)
    81         1   10061921.0    1e+07     50.0          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         2       4876.0   2438.0      0.0          with open("memory_profile_output.txt", "a") as file:
    85         1        138.0    138.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1        111.0    111.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1         58.0     58.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1         13.0     13.0      0.0          return result


Profiling results for function: deduct_stock
Timer unit: 1e-09 s

Total time: 2.06214 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007707525.0    1e+09     48.9          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   33267697.0    3e+07      1.6          result = func(*args, **kwargs)
    81         1 1006954517.0    1e+09     48.8          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   12943516.0    1e+07      0.6          with open("memory_profile_output.txt", "a") as file:
    85         1       5100.0   5100.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      16000.0  16000.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1248012.0    1e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        900.0    900.0      0.0          return result


Profiling results for function: update_item
Timer unit: 1e-09 s

Total time: 2.07034 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005959757.0    1e+09     48.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   31762089.0    3e+07      1.5          result = func(*args, **kwargs)
    81         1 1006880266.0    1e+09     48.6          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   23446814.0    2e+07      1.1          with open("memory_profile_output.txt", "a") as file:
    85         1       7100.0   7100.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      29100.0  29100.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2251721.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1800.0   1800.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.06255 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006022159.0    1e+09     48.8          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   36415132.0    4e+07      1.8          result = func(*args, **kwargs)
    81         1 1006334961.0    1e+09     48.8          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   11968809.0    1e+07      0.6          with open("memory_profile_output.txt", "a") as file:
    85         1       8000.0   8000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      18700.0  18700.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1784316.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1500.0   1500.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.02493 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005284272.0    1e+09     49.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    8458776.0    8e+06      0.4          result = func(*args, **kwargs)
    81         1 1007916356.0    1e+09     49.8          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    1003909.0    1e+06      0.0          with open("memory_profile_output.txt", "a") as file:
    85         1      10000.0  10000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      17201.0  17201.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2235320.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1600.0   1600.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.03458 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006317142.0    1e+09     49.5          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   18583067.0    2e+07      0.9          result = func(*args, **kwargs)
    81         1 1007984657.0    1e+09     49.5          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1     888408.0 888408.0      0.0          with open("memory_profile_output.txt", "a") as file:
    85         1       6000.0   6000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      12800.0  12800.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     790807.0 790807.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1000.0   1000.0      0.0          return result


Profiling results for function: update_review
Timer unit: 1e-09 s

Total time: 2.04068 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007202350.0    1e+09     49.4          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   23132308.0    2e+07      1.1          result = func(*args, **kwargs)
    81         1 1005098431.0    1e+09     49.3          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    3347930.0    3e+06      0.2          with open("memory_profile_output.txt", "a") as file:
    85         1      10000.0  10000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      24500.0  24500.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1859317.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       2300.0   2300.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.03544 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1008145958.0    1e+09     49.5          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   16655249.0    2e+07      0.8          result = func(*args, **kwargs)
    81         1 1005948414.0    1e+09     49.4          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    2825024.0    3e+06      0.1          with open("memory_profile_output.txt", "a") as file:
    85         1       9800.0   9800.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      23100.0  23100.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1830515.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1400.0   1400.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.05504 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006282998.0    1e+09     49.0          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   22446185.0    2e+07      1.1          result = func(*args, **kwargs)
    81         1 1005056489.0    1e+09     48.9          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   19218958.0    2e+07      0.9          with open("memory_profile_output.txt", "a") as file:
    85         1      10400.0  10400.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      25001.0  25001.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1998216.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1200.0   1200.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.04301 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006526315.0    1e+09     49.3          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   17278550.0    2e+07      0.8          result = func(*args, **kwargs)
    81         1 1007311321.0    1e+09     49.3          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   11043296.0    1e+07      0.5          with open("memory_profile_output.txt", "a") as file:
    85         1       6100.0   6100.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      14300.0  14300.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     833107.0 833107.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1000.0   1000.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.05592 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007155620.0    1e+09     49.0          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   13388416.0    1e+07      0.7          result = func(*args, **kwargs)
    81         1 1006398446.0    1e+09     49.0          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   26803740.0    3e+07      1.3          with open("memory_profile_output.txt", "a") as file:
    85         1      10000.0  10000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      24600.0  24600.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2133519.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1400.0   1400.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.04386 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005733383.0    1e+09     49.2          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   20163280.0    2e+07      1.0          result = func(*args, **kwargs)
    81         1 1004558772.0    1e+09     49.2          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   12479512.0    1e+07      0.6          with open("memory_profile_output.txt", "a") as file:
    85         1       6800.0   6800.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      14500.0  14500.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     904508.0 904508.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1000.0   1000.0      0.0          return result


Profiling results for function: deduct_stock
Timer unit: 1e-09 s

Total time: 2.06412 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005929177.0    1e+09     48.7          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   18108249.0    2e+07      0.9          result = func(*args, **kwargs)
    81         1 1005857177.0    1e+09     48.7          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   32044364.0    3e+07      1.6          with open("memory_profile_output.txt", "a") as file:
    85         1       6600.0   6600.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      27500.0  27500.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2145418.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1600.0   1600.0      0.0          return result


Profiling results for function: update_item
Timer unit: 1e-09 s

Total time: 2.04307 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006591782.0    1e+09     49.3          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   12518403.0    1e+07      0.6          result = func(*args, **kwargs)
    81         1 1006978095.0    1e+09     49.3          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   15964836.0    2e+07      0.8          with open("memory_profile_output.txt", "a") as file:
    85         1       5400.0   5400.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      15500.0  15500.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     996609.0 996609.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        800.0    800.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.05863 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1008442114.0    1e+09     49.0          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   24401008.0    2e+07      1.2          result = func(*args, **kwargs)
    81         1 1007792608.0    1e+09     49.0          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   16627642.0    2e+07      0.8          with open("memory_profile_output.txt", "a") as file:
    85         1       7500.0   7500.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      16600.0  16600.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1336411.0    1e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1200.0   1200.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.03007 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006329496.0    1e+09     49.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    8537173.0    9e+06      0.4          result = func(*args, **kwargs)
    81         1 1008401414.0    1e+09     49.7          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    4181236.0    4e+06      0.2          with open("memory_profile_output.txt", "a") as file:
    85         1      13600.0  13600.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      33300.0  33300.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2571222.0    3e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1800.0   1800.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.05071 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006595645.0    1e+09     49.1          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   29876939.0    3e+07      1.5          result = func(*args, **kwargs)
    81         1 1007851382.0    1e+09     49.1          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    3816618.0    4e+06      0.2          with open("memory_profile_output.txt", "a") as file:
    85         1      12600.0  12600.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      31000.0  31000.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2527612.0    3e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1900.0   1900.0      0.0          return result


Profiling results for function: update_review
Timer unit: 1e-09 s

Total time: 2.03861 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006709976.0    1e+09     49.4          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   22127303.0    2e+07      1.1          result = func(*args, **kwargs)
    81         1 1005847772.0    1e+09     49.3          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    2469312.0    2e+06      0.1          with open("memory_profile_output.txt", "a") as file:
    85         1       8000.0   8000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      18500.0  18500.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1426407.0    1e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1000.0   1000.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.03462 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006728476.0    1e+09     49.5          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   17880684.0    2e+07      0.9          result = func(*args, **kwargs)
    81         1 1007950282.0    1e+09     49.5          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    1240506.0    1e+06      0.1          with open("memory_profile_output.txt", "a") as file:
    85         1       6400.0   6400.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      13500.0  13500.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     799803.0 799803.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1000.0   1000.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.07713 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006253432.0    1e+09     48.4          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   25629317.0    3e+07      1.2          result = func(*args, **kwargs)
    81         1 1007778345.0    1e+09     48.5          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   35269599.0    4e+07      1.7          with open("memory_profile_output.txt", "a") as file:
    85         1      10900.0  10900.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      24701.0  24701.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2157718.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1700.0   1700.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.0492 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006590615.0    1e+09     49.1          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   13686113.0    1e+07      0.7          result = func(*args, **kwargs)
    81         1 1008071042.0    1e+09     49.2          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   19780664.0    2e+07      1.0          with open("memory_profile_output.txt", "a") as file:
    85         1       6300.0   6300.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      26900.0  26900.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1037809.0    1e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1200.0   1200.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.0673 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007572837.0    1e+09     48.7          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   14171217.0    1e+07      0.7          result = func(*args, **kwargs)
    81         1 1007694139.0    1e+09     48.7          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   35835397.0    4e+07      1.7          with open("memory_profile_output.txt", "a") as file:
    85         1      10500.0  10500.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      25700.0  25700.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1987517.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1300.0   1300.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.07346 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007070383.0    1e+09     48.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   26715001.0    3e+07      1.3          result = func(*args, **kwargs)
    81         1 1008016790.0    1e+09     48.6          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   29433422.0    3e+07      1.4          with open("memory_profile_output.txt", "a") as file:
    85         1      11000.0  11000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      25000.0  25000.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2184417.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1500.0   1500.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.07079 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006703378.0    1e+09     48.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   35350355.0    4e+07      1.7          result = func(*args, **kwargs)
    81         1 1008968657.0    1e+09     48.7          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   18648335.0    2e+07      0.9          with open("memory_profile_output.txt", "a") as file:
    85         1      26600.0  26600.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      48700.0  48700.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1041608.0    1e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        600.0    600.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.05463 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005399786.0    1e+09     48.9          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   23821790.0    2e+07      1.2          result = func(*args, **kwargs)
    81         1 1004809781.0    1e+09     48.9          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   19651156.0    2e+07      1.0          with open("memory_profile_output.txt", "a") as file:
    85         1       6500.0   6500.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      13000.0  13000.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     921907.0 921907.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1100.0   1100.0      0.0          return result


Profiling results for function: display_goods
Timer unit: 1e-09 s

Total time: 2.03697 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006689214.0    1e+09     49.4          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    3365622.0    3e+06      0.2          result = func(*args, **kwargs)
    81         1 1005289939.0    1e+09     49.4          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   20273632.0    2e+07      1.0          with open("memory_profile_output.txt", "a") as file:
    85         1       6500.0   6500.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      15700.0  15700.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1331109.0    1e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        900.0    900.0      0.0          return result


Profiling results for function: make_sale
Timer unit: 1e-09 s

Total time: 2.07256 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006767442.0    1e+09     48.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   38360219.0    4e+07      1.9          result = func(*args, **kwargs)
    81         1 1006647143.0    1e+09     48.6          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   19837906.0    2e+07      1.0          with open("memory_profile_output.txt", "a") as file:
    85         1       6100.0   6100.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      12800.0  12800.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     930196.0 930196.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        900.0    900.0      0.0          return result


Profiling results for function: make_sale
Timer unit: 1e-09 s

Total time: 2.0293 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006786531.0    1e+09     49.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   12236668.0    1e+07      0.6          result = func(*args, **kwargs)
    81         1 1005841644.0    1e+09     49.6          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    2828216.0    3e+06      0.1          with open("memory_profile_output.txt", "a") as file:
    85         1       8400.0   8400.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      18300.0  18300.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1578009.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1200.0   1200.0      0.0          return result


Profiling results for function: make_sale
Timer unit: 1e-09 s

Total time: 2.02358 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005491042.0    1e+09     49.7          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    9299851.0    9e+06      0.5          result = func(*args, **kwargs)
    81         1 1005781944.0    1e+09     49.7          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    1749210.0    2e+06      0.1          with open("memory_profile_output.txt", "a") as file:
    85         1       6900.0   6900.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      15100.0  15100.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1236107.0    1e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1800.0   1800.0      0.0          return result


Profiling results for function: make_sale
Timer unit: 1e-09 s

Total time: 2.03082 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005904170.0    1e+09     49.5          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   16824941.0    2e+07      0.8          result = func(*args, **kwargs)
    81         1 1005611412.0    1e+09     49.5          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    1457495.0    1e+06      0.1          with open("memory_profile_output.txt", "a") as file:
    85         1       7300.0   7300.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      16400.0  16400.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     994596.0 994596.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1100.0   1100.0      0.0          return result


Profiling results for function: get_all_customers
Timer unit: 1e-09 s

Total time: 2.04359 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006149928.0    1e+09     49.2          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    7603955.0    8e+06      0.4          result = func(*args, **kwargs)
    81         1 1005874958.0    1e+09     49.2          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   22916462.0    2e+07      1.1          with open("memory_profile_output.txt", "a") as file:
    85         1       4799.0   4799.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      31800.0  31800.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1009481.0    1e+06      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1100.0   1100.0      0.0          return result


Profiling results for function: get_customer_by_id
Timer unit: 1e-09 s

Total time: 2.05781 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006063666.0    1e+09     48.9          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    8970437.0    9e+06      0.4          result = func(*args, **kwargs)
    81         1 1005779778.0    1e+09     48.9          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   35146346.0    4e+07      1.7          with open("memory_profile_output.txt", "a") as file:
    85         1       6100.0   6100.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      21000.0  21000.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1815908.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       2000.0   2000.0      0.0          return result


Profiling results for function: get_customer_by_id
Timer unit: 1e-09 s

Total time: 2.05969 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006092533.0    1e+09     48.8          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    3073894.0    3e+06      0.1          result = func(*args, **kwargs)
    81         1 1004817536.0    1e+09     48.8          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   43559319.0    4e+07      2.1          with open("memory_profile_output.txt", "a") as file:
    85         1       6800.0   6800.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      26200.0  26200.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2114496.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1700.0   1700.0      0.0          return result


Profiling results for function: get_customer_by_id
Timer unit: 1e-09 s

Total time: 2.04494 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006667432.0    1e+09     49.2          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    3004194.0    3e+06      0.1          result = func(*args, **kwargs)
    81         1 1005583534.0    1e+09     49.2          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   28798147.0    3e+07      1.4          with open("memory_profile_output.txt", "a") as file:
    85         1       4200.0   4200.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      14400.0  14400.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     865998.0 865998.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        300.0    300.0      0.0          return result


Profiling results for function: charge_wallet
Timer unit: 1e-09 s

Total time: 2.07566 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007948944.0    1e+09     48.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   15789137.0    2e+07      0.8          result = func(*args, **kwargs)
    81         1 1007222053.0    1e+09     48.5          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   42612399.0    4e+07      2.1          with open("memory_profile_output.txt", "a") as file:
    85         1       7100.0   7100.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      26300.0  26300.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2056305.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1700.0   1700.0      0.0          return result


Profiling results for function: view_wishlist
Timer unit: 1e-09 s

Total time: 2.06954 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006082115.0    1e+09     48.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    6507824.0    7e+06      0.3          result = func(*args, **kwargs)
    81         1 1007093773.0    1e+09     48.7          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   47403072.0    5e+07      2.3          with open("memory_profile_output.txt", "a") as file:
    85         1       6800.0   6800.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      25600.0  25600.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2420508.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1400.0   1400.0      0.0          return result


Profiling results for function: deduct_stock
Timer unit: 1e-09 s

Total time: 2.09623 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006253146.0    1e+09     48.0          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   37408125.0    4e+07      1.8          result = func(*args, **kwargs)
    81         1 1004470340.0    1e+09     47.9          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   46062754.0    5e+07      2.2          with open("memory_profile_output.txt", "a") as file:
    85         1       5600.0   5600.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      23700.0  23700.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2000106.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1500.0   1500.0      0.0          return result


Profiling results for function: update_item
Timer unit: 1e-09 s

Total time: 2.09033 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006115805.0    1e+09     48.1          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   25451422.0    3e+07      1.2          result = func(*args, **kwargs)
    81         1 1007252601.0    1e+09     48.2          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   49436748.0    5e+07      2.4          with open("memory_profile_output.txt", "a") as file:
    85         1       5700.0   5700.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      23999.0  23999.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2038994.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1900.0   1900.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.09878 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006727202.0    1e+09     48.0          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   39253880.0    4e+07      1.9          result = func(*args, **kwargs)
    81         1 1006741347.0    1e+09     48.0          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   43965113.0    4e+07      2.1          with open("memory_profile_output.txt", "a") as file:
    85         1      10200.0  10200.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      24100.0  24100.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2053806.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1400.0   1400.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.02687 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006821043.0    1e+09     49.7          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    8126912.0    8e+06      0.4          result = func(*args, **kwargs)
    81         1 1007281835.0    1e+09     49.7          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    2745104.0    3e+06      0.1          with open("memory_profile_output.txt", "a") as file:
    85         1       9000.0   9000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      20900.0  20900.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1866703.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1600.0   1600.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.044 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006277033.0    1e+09     49.2          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   28177443.0    3e+07      1.4          result = func(*args, **kwargs)
    81         1 1006824434.0    1e+09     49.3          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    1533302.0    2e+06      0.1          with open("memory_profile_output.txt", "a") as file:
    85         1       7000.0   7000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      16000.0  16000.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1162702.0    1e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        500.0    500.0      0.0          return result


Profiling results for function: update_review
Timer unit: 1e-09 s

Total time: 2.04227 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007418135.0    1e+09     49.3          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   21238432.0    2e+07      1.0          result = func(*args, **kwargs)
    81         1 1007259735.0    1e+09     49.3          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    3969606.0    4e+06      0.2          with open("memory_profile_output.txt", "a") as file:
    85         1      12800.0  12800.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      28600.0  28600.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2342303.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1500.0   1500.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.04325 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007390135.0    1e+09     49.3          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   23190435.0    2e+07      1.1          result = func(*args, **kwargs)
    81         1 1006520995.0    1e+09     49.3          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    3217907.0    3e+06      0.2          with open("memory_profile_output.txt", "a") as file:
    85         1      16400.0  16400.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      40600.0  40600.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2868207.0    3e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       2900.0   2900.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.07523 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1008322363.0    1e+09     48.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   28072863.0    3e+07      1.4          result = func(*args, **kwargs)
    81         1 1008250563.0    1e+09     48.6          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   29734667.0    3e+07      1.4          with open("memory_profile_output.txt", "a") as file:
    85         1       6300.0   6300.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      12700.0  12700.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     831301.0 831301.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1400.0   1400.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.10252 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006175503.0    1e+09     47.9          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   33899381.0    3e+07      1.6          result = func(*args, **kwargs)
    81         1 1007995607.0    1e+09     47.9          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   52461825.0    5e+07      2.5          with open("memory_profile_output.txt", "a") as file:
    85         1      10500.0  10500.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      22800.0  22800.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1955305.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       2300.0   2300.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.07098 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006255003.0    1e+09     48.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    6135814.0    6e+06      0.3          result = func(*args, **kwargs)
    81         1 1005939132.0    1e+09     48.6          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   50588850.0    5e+07      2.4          with open("memory_profile_output.txt", "a") as file:
    85         1      10800.0  10800.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      24900.0  24900.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2026226.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1400.0   1400.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.08622 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007242635.0    1e+09     48.3          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   16468411.0    2e+07      0.8          result = func(*args, **kwargs)
    81         1 1008596886.0    1e+09     48.3          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   51718145.0    5e+07      2.5          with open("memory_profile_output.txt", "a") as file:
    85         1       9701.0   9701.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      22700.0  22700.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2157506.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       2000.0   2000.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.08248 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005443818.0    1e+09     48.3          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   20955192.0    2e+07      1.0          result = func(*args, **kwargs)
    81         1 1008269931.0    1e+09     48.4          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   45710001.0    5e+07      2.2          with open("memory_profile_output.txt", "a") as file:
    85         1       9700.0   9700.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      23600.0  23600.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2066109.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1200.0   1200.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.0668 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005426131.0    1e+09     48.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   21768943.0    2e+07      1.1          result = func(*args, **kwargs)
    81         1 1006260769.0    1e+09     48.7          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   32353011.0    3e+07      1.6          with open("memory_profile_output.txt", "a") as file:
    85         1       8400.0   8400.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      19300.0  19300.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     961706.0 961706.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1000.0   1000.0      0.0          return result


Profiling results for function: display_goods
Timer unit: 1e-09 s

Total time: 2.05885 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1004911361.0    1e+09     48.8          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    2899419.0    3e+06      0.1          result = func(*args, **kwargs)
    81         1 1005594166.0    1e+09     48.8          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   43146282.0    4e+07      2.1          with open("memory_profile_output.txt", "a") as file:
    85         1      10100.0  10100.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      23800.0  23800.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2268015.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1700.0   1700.0      0.0          return result


Profiling results for function: make_sale
Timer unit: 1e-09 s

Total time: 2.06898 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006420965.0    1e+09     48.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   27336595.0    3e+07      1.3          result = func(*args, **kwargs)
    81         1 1005818061.0    1e+09     48.6          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   28458202.0    3e+07      1.4          with open("memory_profile_output.txt", "a") as file:
    85         1       5900.0   5900.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      13900.0  13900.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     929507.0 929507.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        600.0    600.0      0.0          return result


Profiling results for function: make_sale
Timer unit: 1e-09 s

Total time: 2.03219 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007185870.0    1e+09     49.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   11173179.0    1e+07      0.5          result = func(*args, **kwargs)
    81         1 1006751068.0    1e+09     49.5          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    4114129.0    4e+06      0.2          with open("memory_profile_output.txt", "a") as file:
    85         1      17200.0  17200.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      43601.0  43601.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2905120.0    3e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       2500.0   2500.0      0.0          return result


Profiling results for function: make_sale
Timer unit: 1e-09 s

Total time: 2.02663 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007610873.0    1e+09     49.7          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    7342952.0    7e+06      0.4          result = func(*args, **kwargs)
    81         1 1006183308.0    1e+09     49.6          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    3045441.0    3e+06      0.2          with open("memory_profile_output.txt", "a") as file:
    85         1       9600.0   9600.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      24001.0  24001.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2416332.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1900.0   1900.0      0.0          return result


Profiling results for function: make_sale
Timer unit: 1e-09 s

Total time: 2.05198 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005366419.0    1e+09     49.0          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   35759784.0    4e+07      1.7          result = func(*args, **kwargs)
    81         1 1006555836.0    1e+09     49.1          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    2673036.0    3e+06      0.1          with open("memory_profile_output.txt", "a") as file:
    85         1       8200.0   8200.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      18501.0  18501.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1594921.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1500.0   1500.0      0.0          return result


Profiling results for function: get_all_customers
Timer unit: 1e-09 s

Total time: 2.05635 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006068598.0    1e+09     48.9          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    6720841.0    7e+06      0.3          result = func(*args, **kwargs)
    81         1 1007940609.0    1e+09     49.0          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   34594409.0    3e+07      1.7          with open("memory_profile_output.txt", "a") as file:
    85         1       3700.0   3700.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      17701.0  17701.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1007206.0    1e+06      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        900.0    900.0      0.0          return result


Profiling results for function: get_customer_by_id
Timer unit: 1e-09 s

Total time: 2.07938 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007720208.0    1e+09     48.5          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    8225150.0    8e+06      0.4          result = func(*args, **kwargs)
    81         1 1005813897.0    1e+09     48.4          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   55789554.0    6e+07      2.7          with open("memory_profile_output.txt", "a") as file:
    85         1       5700.0   5700.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      34200.0  34200.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1785811.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1800.0   1800.0      0.0          return result


Profiling results for function: get_customer_by_id
Timer unit: 1e-09 s

Total time: 2.07271 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005545578.0    1e+09     48.5          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    3981726.0    4e+06      0.2          result = func(*args, **kwargs)
    81         1 1006820686.0    1e+09     48.6          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   54980449.0    5e+07      2.7          with open("memory_profile_output.txt", "a") as file:
    85         1       4600.0   4600.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      16400.0  16400.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1360509.0    1e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        900.0    900.0      0.0          return result


Profiling results for function: get_customer_by_id
Timer unit: 1e-09 s

Total time: 2.07737 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007893029.0    1e+09     48.5          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    2521763.0    3e+06      0.1          result = func(*args, **kwargs)
    81         1 1005851135.0    1e+09     48.4          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   59311628.0    6e+07      2.9          with open("memory_profile_output.txt", "a") as file:
    85         1       6201.0   6201.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      21000.0  21000.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1767309.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1400.0   1400.0      0.0          return result


Profiling results for function: charge_wallet
Timer unit: 1e-09 s

Total time: 2.08253 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007394178.0    1e+09     48.4          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   34083889.0    3e+07      1.6          result = func(*args, **kwargs)
    81         1 1006553274.0    1e+09     48.3          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   33271284.0    3e+07      1.6          with open("memory_profile_output.txt", "a") as file:
    85         1       4000.0   4000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      14300.0  14300.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1203207.0    1e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1000.0   1000.0      0.0          return result


Profiling results for function: view_wishlist
Timer unit: 1e-09 s

Total time: 2.0852 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006428305.0    1e+09     48.3          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    6757025.0    7e+06      0.3          result = func(*args, **kwargs)
    81         1 1006204504.0    1e+09     48.3          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   63584534.0    6e+07      3.0          with open("memory_profile_output.txt", "a") as file:
    85         1       6700.0   6700.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      25900.0  25900.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2194808.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       2200.0   2200.0      0.0          return result


Profiling results for function: deduct_stock
Timer unit: 1e-09 s

Total time: 2.10512 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1004796203.0    1e+09     47.7          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   29659341.0    3e+07      1.4          result = func(*args, **kwargs)
    81         1 1004905405.0    1e+09     47.7          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   63956398.0    6e+07      3.0          with open("memory_profile_output.txt", "a") as file:
    85         1       7000.0   7000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      22701.0  22701.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1771244.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1200.0   1200.0      0.0          return result


Profiling results for function: update_item
Timer unit: 1e-09 s

Total time: 2.07384 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005699226.0    1e+09     48.5          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   23896797.0    2e+07      1.2          result = func(*args, **kwargs)
    81         1 1005768031.0    1e+09     48.5          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   37650313.0    4e+07      1.8          with open("memory_profile_output.txt", "a") as file:
    85         1       4593.0   4593.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      13080.0  13080.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     810966.0 810966.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1099.0   1099.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.10569 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006073817.0    1e+09     47.8          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   26379745.0    3e+07      1.3          result = func(*args, **kwargs)
    81         1 1006282017.0    1e+09     47.8          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   65164211.0    7e+07      3.1          with open("memory_profile_output.txt", "a") as file:
    85         1       9100.0   9100.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      20600.0  20600.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1755403.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1100.0   1100.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.02288 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005498115.0    1e+09     49.7          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    4857109.0    5e+06      0.2          result = func(*args, **kwargs)
    81         1 1006398317.0    1e+09     49.8          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    3554906.0    4e+06      0.2          with open("memory_profile_output.txt", "a") as file:
    85         1      10900.0  10900.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      27900.0  27900.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2530605.0    3e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1700.0   1700.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.10798 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006699239.0    1e+09     47.8          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   24739136.0    2e+07      1.2          result = func(*args, **kwargs)
    81         1 1007757208.0    1e+09     47.8          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   66834785.0    7e+07      3.2          with open("memory_profile_output.txt", "a") as file:
    85         1      10299.0  10299.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      24499.0  24499.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1910802.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1500.0   1500.0      0.0          return result


Profiling results for function: update_review
Timer unit: 1e-09 s

Total time: 2.10249 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005782009.0    1e+09     47.8          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   15499608.0    2e+07      0.7          result = func(*args, **kwargs)
    81         1 1007030745.0    1e+09     47.9          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   72065018.0    7e+07      3.4          with open("memory_profile_output.txt", "a") as file:
    85         1      10699.0  10699.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      23599.0  23599.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2071994.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1400.0   1400.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.11305 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007898300.0    1e+09     47.7          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   31552187.0    3e+07      1.5          result = func(*args, **kwargs)
    81         1 1006723360.0    1e+09     47.6          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   65052976.0    7e+07      3.1          with open("memory_profile_output.txt", "a") as file:
    85         1       8700.0   8700.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      19999.0  19999.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1790608.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1600.0   1600.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.08217 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005901559.0    1e+09     48.3          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   25135408.0    3e+07      1.2          result = func(*args, **kwargs)
    81         1 1006642001.0    1e+09     48.3          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   42680517.0    4e+07      2.0          with open("memory_profile_output.txt", "a") as file:
    85         1       6500.0   6500.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      13399.0  13399.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1792858.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1400.0   1400.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.07689 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005569082.0    1e+09     48.4          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   20617624.0    2e+07      1.0          result = func(*args, **kwargs)
    81         1 1007974840.0    1e+09     48.5          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   41777409.0    4e+07      2.0          with open("memory_profile_output.txt", "a") as file:
    85         1       8699.0   8699.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      19799.0  19799.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     917234.0 917234.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1100.0   1100.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.09471 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005512016.0    1e+09     48.0          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   12691392.0    1e+07      0.6          result = func(*args, **kwargs)
    81         1 1006388954.0    1e+09     48.0          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   67724752.0    7e+07      3.2          with open("memory_profile_output.txt", "a") as file:
    85         1       9999.0   9999.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      24798.0  24798.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2357332.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       2200.0   2200.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.11169 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007289419.0    1e+09     47.7          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   25474644.0    3e+07      1.2          result = func(*args, **kwargs)
    81         1 1006205387.0    1e+09     47.6          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   70980173.0    7e+07      3.4          with open("memory_profile_output.txt", "a") as file:
    85         1       8700.0   8700.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      18901.0  18901.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1706850.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1300.0   1300.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.08282 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006995334.0    1e+09     48.3          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   14728557.0    1e+07      0.7          result = func(*args, **kwargs)
    81         1 1009535563.0    1e+09     48.5          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   50579753.0    5e+07      2.4          with open("memory_profile_output.txt", "a") as file:
    85         1       8000.0   8000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      15800.0  15800.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     952897.0 952897.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1600.0   1600.0      0.0          return result


Profiling results for function: submit_review
Timer unit: 1e-09 s

Total time: 2.03373 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1008347471.0    1e+09     49.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   18060186.0    2e+07      0.9          result = func(*args, **kwargs)
    81         1 1005562635.0    1e+09     49.4          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1     960478.0 960478.0      0.0          with open("memory_profile_output.txt", "a") as file:
    85         1       6000.0   6000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      13900.0  13900.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     779883.0 779883.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        700.0    700.0      0.0          return result


Profiling results for function: display_goods
Timer unit: 1e-09 s

Total time: 2.02007 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006971579.0    1e+09     49.8          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    4857668.0    5e+06      0.2          result = func(*args, **kwargs)
    81         1 1006331609.0    1e+09     49.8          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1     980653.0 980653.0      0.0          with open("memory_profile_output.txt", "a") as file:
    85         1      11599.0  11599.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      22299.0  22299.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     895857.0 895857.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        500.0    500.0      0.0          return result


Profiling results for function: make_sale
Timer unit: 1e-09 s

Total time: 2.04637 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006529840.0    1e+09     49.2          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   31067288.0    3e+07      1.5          result = func(*args, **kwargs)
    81         1 1006934431.0    1e+09     49.2          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1     885180.0 885180.0      0.0          with open("memory_profile_output.txt", "a") as file:
    85         1       6700.0   6700.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      14300.0  14300.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     928979.0 928979.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1100.0   1100.0      0.0          return result


Profiling results for function: make_sale
Timer unit: 1e-09 s

Total time: 2.02101 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006323145.0    1e+09     49.8          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    4827289.0    5e+06      0.2          result = func(*args, **kwargs)
    81         1 1005227170.0    1e+09     49.7          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    2542041.0    3e+06      0.1          with open("memory_profile_output.txt", "a") as file:
    85         1      10200.0  10200.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      24499.0  24499.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    2053453.0    2e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       2100.0   2100.0      0.0          return result


Profiling results for function: make_sale
Timer unit: 1e-09 s

Total time: 2.0265 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005904054.0    1e+09     49.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   11316741.0    1e+07      0.6          result = func(*args, **kwargs)
    81         1 1006292945.0    1e+09     49.7          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    1888656.0    2e+06      0.1          with open("memory_profile_output.txt", "a") as file:
    85         1       7000.0   7000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      16100.0  16100.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1071175.0    1e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        900.0    900.0      0.0          return result


Profiling results for function: make_sale
Timer unit: 1e-09 s

Total time: 2.03215 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006532340.0    1e+09     49.5          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   15907235.0    2e+07      0.8          result = func(*args, **kwargs)
    81         1 1007780473.0    1e+09     49.6          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1     932909.0 932909.0      0.0          with open("memory_profile_output.txt", "a") as file:
    85         1       7000.0   7000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      14300.0  14300.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     970610.0 970610.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        800.0    800.0      0.0          return result


Profiling results for function: get_all_customers
Timer unit: 1e-09 s

Total time: 2.06313 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006701038.0    1e+09     48.8          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    6786674.0    7e+06      0.3          result = func(*args, **kwargs)
    81         1 1006337172.0    1e+09     48.8          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   41801086.0    4e+07      2.0          with open("memory_profile_output.txt", "a") as file:
    85         1      57700.0  57700.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      21800.0  21800.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1424096.0    1e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1600.0   1600.0      0.0          return result


Profiling results for function: get_customer_by_id
Timer unit: 1e-09 s

Total time: 2.06829 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005338967.0    1e+09     48.6          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    6703582.0    7e+06      0.3          result = func(*args, **kwargs)
    81         1 1006660264.0    1e+09     48.7          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   48439668.0    5e+07      2.3          with open("memory_profile_output.txt", "a") as file:
    85         1       5500.0   5500.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      22300.0  22300.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1121197.0    1e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        700.0    700.0      0.0          return result


Profiling results for function: get_customer_by_id
Timer unit: 1e-09 s

Total time: 2.05973 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1006118440.0    1e+09     48.8          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    2418900.0    2e+06      0.1          result = func(*args, **kwargs)
    81         1 1006281316.0    1e+09     48.9          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1   43396005.0    4e+07      2.1          with open("memory_profile_output.txt", "a") as file:
    85         1       5300.0   5300.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      43300.0  43300.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1470600.0    1e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        800.0    800.0      0.0          return result


Profiling results for function: get_customer_by_id
Timer unit: 1e-09 s

Total time: 2.01843 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1007080116.0    1e+09     49.9          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    3385500.0    3e+06      0.2          result = func(*args, **kwargs)
    81         1 1004412316.0    1e+09     49.8          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    2132701.0    2e+06      0.1          with open("memory_profile_output.txt", "a") as file:
    85         1       5000.0   5000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      17600.0  17600.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1394600.0    1e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       1100.0   1100.0      0.0          return result


Profiling results for function: charge_wallet
Timer unit: 1e-09 s

Total time: 2.03262 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1004931216.0    1e+09     49.4          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1   20677202.0    2e+07      1.0          result = func(*args, **kwargs)
    81         1 1004450877.0    1e+09     49.4          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1    1411552.0    1e+06      0.1          with open("memory_profile_output.txt", "a") as file:
    85         1       3999.0   3999.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      14400.0  14400.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1    1130261.0    1e+06      0.1              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1       2600.0   2600.0      0.0          return result


Profiling results for function: view_wishlist
Timer unit: 1e-09 s

Total time: 2.02034 s
File: /app/utils.py
Function: wrapper at line 77

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    77                                               @wraps(func)
    78                                               def wrapper(*args, **kwargs):
    79         1 1005971912.0    1e+09     49.8          mem_usage_before = memory_usage(-1, interval=0.1, timeout=1)
    80         1    6365707.0    6e+06      0.3          result = func(*args, **kwargs)
    81         1 1006364800.0    1e+09     49.8          mem_usage_after = memory_usage(-1, interval=0.1, timeout=1)
    82                                           
    83                                                   # Log memory usage stats
    84         1     820775.0 820775.0      0.0          with open("memory_profile_output.txt", "a") as file:
    85         1       4000.0   4000.0      0.0              file.write(f"\nMemory profiling for function: {func.__name__}\n")
    86         1      13999.0  13999.0      0.0              file.write(f"Memory before: {mem_usage_before} MB\n")
    87         1     799776.0 799776.0      0.0              file.write(f"Memory after: {mem_usage_after} MB\n")
    88                                           
    89         1        900.0    900.0      0.0          return result

